#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Script ƒë·ªÉ t·∫°o b√°o c√°o t·ª± ƒë·ªông theo l·ªãch tr√¨nh
C√≥ th·ªÉ ch·∫°y b·∫±ng crontab tr√™n h·ªá th·ªëng Linux/Mac ho·∫∑c Task Scheduler tr√™n Windows
"""

import os
import sys
import json
import logging
import argparse
from datetime import datetime
import asyncio
from typing import List, Dict, Any

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("logs/scheduled_reports.log")
    ]
)
logger = logging.getLogger("scheduled_reports")

# Import c√°c module c·∫ßn thi·∫øt
from core.data.db import DBManager
from core.data.load_data import DataLoader
from pipeline.processor import PipelineProcessor
from core.report.manager import ReportManager
from core.telegram.notify import send_report_to_telegram
from core.ai.groq import GroqHandler
from core.ai.gemini import GeminiHandler

class ScheduledReportGenerator:
    """
    L·ªõp qu·∫£n l√Ω t·∫°o b√°o c√°o t·ª± ƒë·ªông theo l·ªãch tr√¨nh
    """
    
    def __init__(self, config_path: str = None):
        """
        Kh·ªüi t·∫°o Generator
        
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
        """
        # T·∫£i c·∫•u h√¨nh
        self.config = self._load_config(config_path)
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn core
        self.db = DBManager()
        self.data_loader = DataLoader()
        self.pipeline = PipelineProcessor()
        self.groq_handler = GroqHandler()
        self.gemini_handler = GeminiHandler()
        self.report_manager = ReportManager(self.db, self.gemini_handler)
        
        logger.info("ScheduledReportGenerator ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
    
    def _load_config(self, config_path: str = None) -> Dict[str, Any]:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh
            
        Returns:
            Dict ch·ª©a th√¥ng tin c·∫•u h√¨nh
        """
        # ƒê∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
        if not config_path:
            config_path = os.path.join("config", "telegram_config.json")
        
        try:
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(config_path):
                logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh {config_path}, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
                return {
                    "telegram": {
                        "daily_report": {
                            "enabled": True,
                            "symbols": ["VNINDEX", "VN30"]
                        }
                    }
                }
            
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {config_path}")
            return config
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh: {str(e)}")
            return {
                "telegram": {
                    "daily_report": {
                        "enabled": True,
                        "symbols": ["VNINDEX", "VN30"]
                    }
                }
            }
    
    def generate_report_for_symbol(self, symbol: str) -> Dict[str, Any]:
        """
        T·∫°o b√°o c√°o cho m·ªôt m√£ c·ªï phi·∫øu (sync)
        """
        try:
            logger.info(f"B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o cho {symbol}")
            
            # S·ª≠ d·ª•ng pipeline processor ƒë·ªÉ ph√¢n t√≠ch
            pipeline_data = self.pipeline.process(symbol)
            
            if not pipeline_data or (hasattr(pipeline_data, 'has_error') and pipeline_data.has_error):
                error_msg = getattr(pipeline_data, 'error', 'Kh√¥ng r√µ l·ªói') if pipeline_data else 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu'
                logger.error(f"L·ªói khi ph√¢n t√≠ch {symbol}: {error_msg}")
                return {"success": False, "error": error_msg}
            
            # T·ªïng h·ª£p d·ªØ li·ªáu
            aggregated_data = self.pipeline.aggregate_pipeline_result(pipeline_data)
            
            # Sinh b√°o c√°o
            report_result = self.report_manager.generate_report(
                aggregated_data, 
                symbol,
                meta={
                    "close_today": aggregated_data.get("current_price", 0),
                    "close_yesterday": aggregated_data.get("previous_price", 0)
                }
            )
            
            if not report_result.get("success") or not report_result.get("report"):
                error_msg = report_result.get("error", "Kh√¥ng th·ªÉ sinh b√°o c√°o")
                logger.error(f"L·ªói khi sinh b√°o c√°o cho {symbol}: {error_msg}")
                return {"success": False, "error": error_msg}
            
            # L∆∞u b√°o c√°o v√†o DB
            saved = self.report_manager.save_report(
                symbol,
                report_result["report"],
                aggregated_data.get("current_price", 0),
                aggregated_data.get("previous_price", 0)
            )
            
            logger.info(f"ƒê√£ t·∫°o b√°o c√°o cho {symbol} th√†nh c√¥ng")
            return {
                "success": True, 
                "report": report_result["report"],
                "saved": saved
            }
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω {symbol}: {str(e)}", exc_info=True)
            return {"success": False, "error": str(e)}
    
    def send_report(self, report: str, symbol: str) -> bool:
        """
        G·ª≠i b√°o c√°o qua Telegram (sync)
        """
        try:
            # L·∫•y th√¥ng tin bot_token v√† chat_id t·ª´ c·∫•u h√¨nh
            bot_token = self.config.get('telegram', {}).get('bot_token') or os.getenv("TELEGRAM_BOT_TOKEN")
            chat_id = self.config.get('telegram', {}).get('chat_id') or os.getenv("TELEGRAM_CHAT_ID")
            
            # T·∫°o message header
            current_time = datetime.now().strftime("%H:%M:%S %d/%m/%Y")
            header = f"üìä *B√ÅO C√ÅO T·ª∞ ƒê·ªòNG: {symbol}*\n‚è±Ô∏è *Th·ªùi gian:* {current_time}\n\n"
            
            # G·ª≠i b√°o c√°o v·ªõi header
            success = send_report_to_telegram(
                header + report,
                chat_id=chat_id,
                bot_token=bot_token,
                parse_mode="MARKDOWN"
            )
            
            if success:
                logger.info(f"ƒê√£ g·ª≠i b√°o c√°o cho {symbol} th√†nh c√¥ng")
            else:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o cho {symbol}")
            
            return success
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i b√°o c√°o: {str(e)}")
            return False
    
    def generate_daily_reports(self):
        """
        T·∫°o c√°c b√°o c√°o h√†ng ng√†y theo c·∫•u h√¨nh (sync)
        """
        # Ki·ªÉm tra c·∫•u h√¨nh b√°o c√°o h√†ng ng√†y
        daily_report_config = self.config.get('telegram', {}).get('daily_report', {})
        if not daily_report_config.get('enabled', False):
            logger.info("B√°o c√°o h√†ng ng√†y kh√¥ng ƒë∆∞·ª£c b·∫≠t trong c·∫•u h√¨nh")
            return
        
        # L·∫•y danh s√°ch m√£ c·∫ßn b√°o c√°o
        symbols = daily_report_config.get('symbols', [])
        if not symbols:
            logger.warning("Kh√¥ng c√≥ m√£ n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho b√°o c√°o h√†ng ng√†y")
            return
        
        logger.info(f"B·∫Øt ƒë·∫ßu t·∫°o b√°o c√°o h√†ng ng√†y cho {len(symbols)} m√£: {', '.join(symbols)}")
        
        # T·∫°o b√°o c√°o cho t·ª´ng m√£
        for symbol in symbols:
            try:
                # T·∫°o b√°o c√°o
                report_result = self.generate_report_for_symbol(symbol)
                
                if report_result.get("success") and report_result.get("report"):
                    # G·ª≠i b√°o c√°o
                    self.send_report(report_result["report"], symbol)
                else:
                    error_msg = report_result.get("error", "Kh√¥ng r√µ l·ªói")
                    logger.error(f"Kh√¥ng th·ªÉ t·∫°o b√°o c√°o cho {symbol}: {error_msg}")
            except Exception as e:
                logger.error(f"L·ªói khi x·ª≠ l√Ω b√°o c√°o cho {symbol}: {str(e)}", exc_info=True)
        
        logger.info("Ho√†n th√†nh t·∫°o b√°o c√°o h√†ng ng√†y")

def main():
    """
    H√†m ch√≠nh ƒë·ªÉ t·∫°o b√°o c√°o theo l·ªãch tr√¨nh (sync)
    """
    # Parse arguments
    parser = argparse.ArgumentParser(description="T·∫°o b√°o c√°o t·ª± ƒë·ªông theo l·ªãch tr√¨nh")
    parser.add_argument("--config", type=str, help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh")
    parser.add_argument("--symbol", type=str, help="M√£ c·ªï phi·∫øu c·ª• th·ªÉ (n·∫øu kh√¥ng cung c·∫•p, s·∫Ω d√πng danh s√°ch trong c·∫•u h√¨nh)")
    parser.add_argument("--debug", action="store_true", help="B·∫≠t ch·∫ø ƒë·ªô debug")
    args = parser.parse_args()
    
    # C·∫•u h√¨nh logging
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    try:
        # Kh·ªüi t·∫°o generator
        generator = ScheduledReportGenerator(args.config)
        
        # N·∫øu c√≥ symbol c·ª• th·ªÉ, ch·ªâ t·∫°o b√°o c√°o cho m√£ ƒë√≥
        if args.symbol:
            symbol = args.symbol.upper()
            logger.info(f"T·∫°o b√°o c√°o cho m√£ c·ª• th·ªÉ: {symbol}")
            
            report_result = generator.generate_report_for_symbol(symbol)
            
            if report_result.get("success") and report_result.get("report"):
                generator.send_report(report_result["report"], symbol)
                logger.info(f"ƒê√£ t·∫°o v√† g·ª≠i b√°o c√°o cho {symbol} th√†nh c√¥ng")
            else:
                error_msg = report_result.get("error", "Kh√¥ng r√µ l·ªói")
                logger.error(f"Kh√¥ng th·ªÉ t·∫°o b√°o c√°o cho {symbol}: {error_msg}")
        else:
            # T·∫°o b√°o c√°o h√†ng ng√†y theo c·∫•u h√¨nh
            generator.generate_daily_reports()
        
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c: {str(e)}", exc_info=True)
        sys.exit(1)

if __name__ == "__main__":
    main() 