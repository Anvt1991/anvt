#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Bot Telegram cho BotChatAI s·ª≠ d·ª•ng webhook.
"""

import os
import logging
import json
from typing import Dict, Any, Optional, Callable
from datetime import datetime

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from telegram.constants import ParseMode
from fastapi import FastAPI, Request, Response, HTTPException, Depends

# Import module BotChatAI
from pipeline.processor import PipelineProcessor
from core.data.load_data import DataLoader
from core.data.db import DBManager

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

class BotChatAITelegramBot:
    """
    Bot Telegram cho BotChatAI v·ªõi c√°c l·ªánh ph√¢n t√≠ch ch·ª©ng kho√°n.
    H·ªó tr·ª£ c√°c l·ªánh: /analyze, /market, /symbols, /history, /help
    """

    def __init__(self, bot_token: str = None, setup_secret: str = None):
        """
        Kh·ªüi t·∫°o Bot Telegram BotChatAI

        Args:
            bot_token: Telegram Bot Token, n·∫øu None s·∫Ω l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng TELEGRAM_BOT_TOKEN
            setup_secret: Secret ƒë·ªÉ thi·∫øt l·∫≠p webhook, n·∫øu None s·∫Ω l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng SETUP_SECRET
        """
        self.token = bot_token or os.environ.get("TELEGRAM_BOT_TOKEN")
        if not self.token:
            logger.error("Kh√¥ng t√¨m th·∫•y TELEGRAM_BOT_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng!")
            raise ValueError("TELEGRAM_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c cung c·∫•p")

        self.setup_secret = setup_secret or os.environ.get("SETUP_SECRET", "botchatai_secret")
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
        self.pipeline = PipelineProcessor()
        self.data_loader = DataLoader()
        self.db = DBManager()
        
        # Kh·ªüi t·∫°o bot v√† application
        self.bot = Bot(token=self.token)
        self.application = Application.builder().token(self.token).build()
        
        # ƒêƒÉng k√Ω c√°c command handler
        self._register_handlers()
        
        # T·∫°o FastAPI app
        self.app = FastAPI(title="BotChatAI Telegram Bot")
        self._setup_routes()
    
    def _register_handlers(self):
        """ƒêƒÉng k√Ω c√°c command handler cho bot"""
        self.application.add_handler(CommandHandler("start", self.help_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("analyze", self.analyze_command))
        self.application.add_handler(CommandHandler("market", self.market_command))
        self.application.add_handler(CommandHandler("symbols", self.symbols_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
    
    def _setup_routes(self):
        """Thi·∫øt l·∫≠p c√°c routes cho FastAPI app"""
        
        @self.app.post(f"/webhook/{self.token}")
        async def telegram_webhook(request: Request):
            """X·ª≠ l√Ω webhook t·ª´ Telegram"""
            try:
                data = await request.json()
                # Chuy·ªÉn JSON th√†nh update object
                update = Update.de_json(data, self.bot)
                # X·ª≠ l√Ω update
                await self.application.process_update(update)
                return Response(content="OK", status_code=200)
            except Exception as e:
                logger.error(f"L·ªói khi x·ª≠ l√Ω webhook: {str(e)}")
                return Response(content=f"Error: {str(e)}", status_code=500)
        
        @self.app.get("/setup")
        async def setup_webhook_route(secret: str, url: str):
            """Thi·∫øt l·∫≠p webhook URL cho bot"""
            if secret != self.setup_secret:
                raise HTTPException(status_code=403, detail="Secret kh√¥ng h·ª£p l·ªá")
            
            webhook_url = f"{url}/webhook/{self.token}"
            result = await self.bot.set_webhook(webhook_url)
            
            if result:
                return {
                    "success": True, 
                    "message": f"Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p t·∫°i {webhook_url}"
                }
            else:
                raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ thi·∫øt l·∫≠p webhook")
        
        @self.app.get("/")
        async def root():
            """Endpoint m·∫∑c ƒë·ªãnh cho health check"""
            return {"status": "online", "bot": "BotChatAI Telegram Bot"}
    
    def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        X·ª≠ l√Ω l·ªánh /help ho·∫∑c /start (sync)
        """
        help_text = """
ü§ñ *BotChatAI - Tr·ª£ l√Ω ph√¢n t√≠ch ch·ª©ng kho√°n*

*C√°c l·ªánh c√≥ s·∫µn:*
/analyze <m√£> - Ph√¢n t√≠ch m√£ c·ª• th·ªÉ (vd: /analyze FPT)
/market - Th√¥ng tin th·ªã tr∆∞·ªùng hi·ªán t·∫°i
/symbols - Danh s√°ch m√£ ch·ª©ng kho√°n
/history <m√£> - L·ªãch s·ª≠ ph√¢n t√≠ch m√£
/status - Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y

_Bot ƒëang trong giai ƒëo·∫°n ph√°t tri·ªÉn, vui l√≤ng b√°o l·ªói n·∫øu ph√°t hi·ªán._
"""
        update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        X·ª≠ l√Ω l·ªánh /analyze <m√£> (sync)
        """
        if not context.args:
            update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n. V√≠ d·ª•: /analyze FPT")
            return
        symbol = context.args[0].upper()
        loading_message = update.message.reply_text(f"‚è≥ ƒêang ph√¢n t√≠ch {symbol}...")
        try:
            pipeline_result = self.process_symbol(symbol)
            if pipeline_result and pipeline_result.get("report"):
                loading_message.edit_text(pipeline_result["report"], parse_mode=ParseMode.MARKDOWN)
            else:
                error_msg = pipeline_result.get("error", "Kh√¥ng r√µ l·ªói")
                loading_message.edit_text(f"‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch {symbol}: {error_msg}")
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch {symbol}: {str(e)}", exc_info=True)
            loading_message.edit_text(f"‚ùå L·ªói khi ph√¢n t√≠ch {symbol}: {str(e)}")

    def market_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Hi·ªÉn th·ªã th√¥ng tin th·ªã tr∆∞·ªùng khi ng∆∞·ªùi d√πng nh·∫Øn /market (sync)
        """
        loading_message = update.message.reply_text("‚è≥ ƒêang l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng...")
        try:
            market_info = self.pipeline.get_market_condition()
            text = "üìä *TH√îNG TIN TH·ªä TR∆Ø·ªúNG*\n\n"
            if market_info:
                vnindex = market_info.get("vnindex_last", 0)
                change = market_info.get("vnindex_change", 0)
                change_pct = market_info.get("vnindex_change_pct", 0)
                sentiment = market_info.get("market_sentiment", {})
                trend = market_info.get("market_trend", "N/A")
                text += f"üìà *VN-Index:* {vnindex:,.2f} ({'+' if change >= 0 else ''}{change:,.2f} | {change_pct:.2f}%)\n"
                text += f"üìâ *Xu h∆∞·ªõng:* {trend}\n"
                if sentiment:
                    score = sentiment.get("score", 0)
                    label = sentiment.get("label", "trung t√≠nh")
                    text += f"ü§î *T√¢m l√Ω th·ªã tr∆∞·ªùng:* {label} (score: {score:.2f})\n\n"
                text += f"‚è±Ô∏è *C·∫≠p nh·∫≠t:* {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
            else:
                text += "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng."
            loading_message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng: {str(e)}")
            loading_message.edit_text(f"‚ùå L·ªói khi l·∫•y th√¥ng tin th·ªã tr∆∞·ªùng: {str(e)}")

    def symbols_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Hi·ªÉn th·ªã danh s√°ch m√£ ch·ª©ng kho√°n khi ng∆∞·ªùi d√πng nh·∫Øn /symbols (sync)
        """
        try:
            vn30_symbols = self.data_loader.get_vn30_stocks()
            if vn30_symbols:
                text = "üìã *DANH S√ÅCH M√É VN30*\n\n"
                chunks = [vn30_symbols[i:i+5] for i in range(0, len(vn30_symbols), 5)]
                for chunk in chunks:
                    text += " - ".join(chunk) + "\n"
                text += "\nüí° *C√°ch d√πng:* /analyze <m√£> ƒë·ªÉ ph√¢n t√≠ch m√£ c·ª• th·ªÉ"
            else:
                text = "‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch m√£."
            update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y danh s√°ch m√£: {str(e)}")
            update.message.reply_text(f"‚ùå L·ªói khi l·∫•y danh s√°ch m√£: {str(e)}")

    def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        Hi·ªÉn th·ªã l·ªãch s·ª≠ ph√¢n t√≠ch m√£ khi ng∆∞·ªùi d√πng nh·∫Øn /history <m√£> (sync)
        """
        if not context.args:
            update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n. V√≠ d·ª•: /history FPT")
            return
        symbol = context.args[0].upper()
        loading_message = update.message.reply_text(f"‚è≥ ƒêang l·∫•y l·ªãch s·ª≠ ph√¢n t√≠ch {symbol}...")
        try:
            history = self.db.load_report_history(symbol)
            if history and len(history) > 0:
                text = f"üìú *L·ªäCH S·ª¨ PH√ÇN T√çCH {symbol}*\n\n"
                for i, report in enumerate(history[:5]):
                    date = report.get("date", "N/A")
                    close = report.get("close_today", 0)
                    prev_close = report.get("close_yesterday", 0)
                    change = close - prev_close
                    change_pct = (change / prev_close * 100) if prev_close else 0
                    text += f"üìä *B√°o c√°o {i+1}:* {date}\n"
                    text += f"üí∞ Gi√°: {close:,.2f} ({'+' if change >= 0 else ''}{change:,.2f} | {change_pct:.2f}%)\n"
                    text += "---------------------\n"
                text += f"\nüí° S·ª≠ d·ª•ng /analyze {symbol} ƒë·ªÉ ph√¢n t√≠ch m·ªõi nh·∫•t"
            else:
                text = f"‚ùå Kh√¥ng c√≥ l·ªãch s·ª≠ ph√¢n t√≠ch cho {symbol}."
            loading_message.edit_text(text, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y l·ªãch s·ª≠ ph√¢n t√≠ch {symbol}: {str(e)}")
            loading_message.edit_text(f"‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ ph√¢n t√≠ch {symbol}: {str(e)}")
    
    def format_analysis_result(self, result: Dict[str, Any]) -> str:
        """Format k·∫øt qu·∫£ ph√¢n t√≠ch th√†nh vƒÉn b·∫£n Telegram"""
        if not result or "error" in result:
            return f"‚ùå L·ªói khi ph√¢n t√≠ch: {result.get('error', 'Kh√¥ng r√µ')}"
        
        symbol = result.get("symbol", "???")
        last_price = result.get("last_price", 0)
        prev_price = result.get("previous_price", 0)
        
        change = last_price - prev_price
        change_pct = (change / prev_price * 100) if prev_price else 0
        
        # L·∫•y c√°c ph√¢n t√≠ch
        tech_analysis = result.get("technical_analysis", {})
        ai_analysis = result.get("ai_analysis", {})
        prediction = result.get("prediction", {})
        
        # T·ªïng h·ª£p t√≠n hi·ªáu k·ªπ thu·∫≠t
        signals = tech_analysis.get("signals", {})
        bullish = sum(1 for s in signals.values() if s == "bullish")
        bearish = sum(1 for s in signals.values() if s == "bearish")
        neutral = sum(1 for s in signals.values() if s == "neutral")
        
        # T·∫°o vƒÉn b·∫£n ph√¢n t√≠ch
        text = f"üìä *Ph√¢n t√≠ch {symbol}*\n\n"
        text += f"üí∞ *Gi√° hi·ªán t·∫°i:* {last_price:,.2f} ({'+' if change >= 0 else ''}{change:,.2f} | {change_pct:.2f}%)\n\n"
        
        text += f"üìà *T√≠n hi·ªáu k·ªπ thu·∫≠t:* {bullish} tƒÉng | {bearish} gi·∫£m | {neutral} trung t√≠nh\n"
        
        # Xu h∆∞·ªõng
        trend = tech_analysis.get("trend_analysis", {}).get("trend", "N/A")
        text += f"üìâ *Xu h∆∞·ªõng:* {trend}\n\n"
        
        # Ph√¢n t√≠ch AI
        if ai_analysis:
            ai_summary = ai_analysis.get("summary", "Kh√¥ng c√≥ th√¥ng tin")
            text += f"ü§ñ *Ph√¢n t√≠ch AI:*\n{ai_summary}\n\n"
        
        # D·ª± ƒëo√°n
        if prediction:
            pred_direction = prediction.get("direction", "?")
            pred_confidence = prediction.get("confidence", 0) * 100
            text += f"üîÆ *D·ª± ƒëo√°n:* {pred_direction} (ƒë·ªô tin c·∫≠y: {pred_confidence:.1f}%)\n\n"
        
        # H·ªó tr·ª£ v√† kh√°ng c·ª±
        sr = tech_analysis.get("support_resistance", {})
        supports = sr.get("support_levels", [])
        resistances = sr.get("resistance_levels", [])
        
        if supports:
            text += f"‚¨áÔ∏è *H·ªó tr·ª£:* {', '.join([f'{s:,.2f}' for s in supports[:3]])}\n"
        if resistances:
            text += f"‚¨ÜÔ∏è *Kh√°ng c·ª±:* {', '.join([f'{r:,.2f}' for r in resistances[:3]])}\n\n"
        
        # Th√™m th·ªùi gian ph√¢n t√≠ch
        text += f"‚è±Ô∏è *C·∫≠p nh·∫≠t:* {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"
        
        return text

async def setup_webhook(bot: Bot, webhook_url: str) -> bool:
    """
    Thi·∫øt l·∫≠p webhook URL cho bot
    
    Args:
        bot: Bot Telegram 
        webhook_url: URL webhook (kh√¥ng bao g·ªìm /webhook/{token})
        
    Returns:
        True n·∫øu th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
    """
    token = bot.token
    full_url = f"{webhook_url}/webhook/{token}"
    try:
        result = await bot.set_webhook(full_url)
        if result:
            logger.info(f"Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p t·∫°i {full_url}")
            return True
        logger.error(f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p webhook t·∫°i {full_url}")
        return False
    except Exception as e:
        logger.error(f"L·ªói khi thi·∫øt l·∫≠p webhook: {str(e)}")
        return False

def start_bot(host: str = "0.0.0.0", port: int = 10000):
    """
    Kh·ªüi ƒë·ªông bot Telegram v·ªõi FastAPI server
    
    Args:
        host: Host ƒë·ªÉ binding server
        port: Port ƒë·ªÉ binding server
    """
    import uvicorn
    
    try:
        # Kh·ªüi t·∫°o bot
        bot = BotChatAITelegramBot()
        
        # Ch·∫°y FastAPI
        logger.info(f"Kh·ªüi ƒë·ªông BotChatAI Telegram Bot tr√™n {host}:{port}")
        uvicorn.run(bot.app, host=host, port=port)
    except Exception as e:
        logger.error(f"L·ªói khi kh·ªüi ƒë·ªông bot: {str(e)}")
        raise 