#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Phi√™n b·∫£n BotChatAI ch·ªâ s·ª≠ d·ª•ng Telegram - kh√¥ng c√≥ GUI
"""

import os
import sys
import logging
import json
import time
import asyncio
import traceback
from datetime import datetime
import argparse
from pathlib import Path
from typing import Dict, Any, Optional
from fastapi import FastAPI, Request, Response, HTTPException

# C·∫•u h√¨nh logging
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

file_handler = logging.FileHandler("logs/telegram_bot.log", encoding="utf-8")
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

logging.basicConfig(level=logging.INFO, handlers=[console_handler, file_handler])
logger = logging.getLogger("telegram_bot_main")

# Import c√°c module c·∫ßn thi·∫øt
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
from telegram.constants import ParseMode
from core.data.db import DBManager
from core.data.load_data import DataLoader
from pipeline.processor import PipelineProcessor
from core.report.manager import ReportManager
from core.telegram.notify import send_report_to_telegram

class TelegramOnlyBot:
    """
    L·ªõp qu·∫£n l√Ω bot Telegram cho BotChatAI (phi√™n b·∫£n kh√¥ng c√≥ GUI)
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """
        Kh·ªüi t·∫°o bot v√† c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt
        
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫•u h√¨nh (n·∫øu c√≥)
        """
        # T·∫£i c·∫•u h√¨nh
        self.config = self._load_config(config_path)
        
        # Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng
        self._setup_environment()
        
        # L·∫•y token v√† chat_id t·ª´ c·∫•u h√¨nh ho·∫∑c bi·∫øn m√¥i tr∆∞·ªùng
        self.bot_token = self.config.get('telegram', {}).get('bot_token') or os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = self.config.get('telegram', {}).get('chat_id') or os.getenv("TELEGRAM_CHAT_ID")
        
        # T·ª± ƒë·ªông duy·ªát admin
        self.ADMIN_ID = os.getenv("ADMIN_ID") or self.config.get('telegram', {}).get('admin_id')
        
        if not self.bot_token:
            logger.error("Kh√¥ng t√¨m th·∫•y TELEGRAM_BOT_TOKEN! H√£y cung c·∫•p th√¥ng qua bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c file config.")
            sys.exit(1)
        
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn core
        self.db = DBManager()
        self.data_loader = DataLoader()
        self.pipeline = PipelineProcessor()
        self.report_manager = ReportManager(self.db, self.pipeline.gemini_handler)
        
        # Kh·ªüi t·∫°o Telegram Bot
        self.bot = Bot(token=self.bot_token)
        self.application = Application.builder().token(self.bot_token).build()
        
        # ƒêƒÉng k√Ω c√°c l·ªánh
        self.whitelist_path = os.path.join("cache", "approved_users.json")
        self.approved_users = self._load_whitelist()
        # T·ª± ƒë·ªông duy·ªát admin n·∫øu ch∆∞a c√≥
        if self.ADMIN_ID and self.ADMIN_ID not in self.approved_users:
            self.approved_users.add(self.ADMIN_ID)
            self._save_whitelist()
            logger.info(f"T·ª± ƒë·ªông duy·ªát admin: {self.ADMIN_ID}")
        self._register_handlers()
        
        logger.info("BotChatAI (phi√™n b·∫£n Telegram only) ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")
    
    def _load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """
        T·∫£i c·∫•u h√¨nh t·ª´ file
        
        Args:
            config_path: ƒê∆∞·ªùng d·∫´n t·ªõi file c·∫•u h√¨nh
            
        Returns:
            Dict ch·ª©a th√¥ng tin c·∫•u h√¨nh
        """
        # ƒê∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
        if not config_path:
            config_path = os.path.join("config", "telegram_config.json")
        
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(config_path):
            logger.warning(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh {config_path}, s·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh")
            return {}
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh t·ª´ {config_path}")
            return config
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh: {str(e)}")
            return {}
    
    def _setup_environment(self):
        """
        Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng l√†m vi·ªác
        """
        # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
        dirs_to_create = [
            "logs",
            "cache",
            "reports",
            "models"
        ]
        
        for directory in dirs_to_create:
            os.makedirs(directory, exist_ok=True)
        
        # Thi·∫øt l·∫≠p m√∫i gi·ªù
        os.environ['TZ'] = 'Asia/Ho_Chi_Minh'
    
    def _load_whitelist(self):
        if os.path.exists(self.whitelist_path):
            try:
                with open(self.whitelist_path, "r", encoding="utf-8") as f:
                    return set(json.load(f))
            except Exception:
                return set()
        return set()

    def _save_whitelist(self):
        with open(self.whitelist_path, "w", encoding="utf-8") as f:
            json.dump(list(self.approved_users), f)

    def _is_admin(self, update):
        return str(update.effective_chat.id) == str(self.chat_id)

    def _is_approved(self, update):
        return self._is_admin(update) or str(update.effective_user.id) in self.approved_users

    def _register_handlers(self):
        # Th√™m l·∫°i l·ªánh start, gi·ªØ c√°c l·ªánh approve, remove, update, analyze, status
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("approve", self.approve_command))
        self.application.add_handler(CommandHandler("remove", self.remove_command))
        self.application.add_handler(CommandHandler("update", self.update_command))
        self.application.add_handler(CommandHandler("analyze", self.analyze_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_approved(update):
            await update.message.reply_text("‚õî B·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát s·ª≠ d·ª•ng bot. Vui l√≤ng li√™n h·ªá admin.")
            return
        welcome_text = (
            "ü§ñ *Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi BotChatAI!*\n\n"
            "B·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát s·ª≠ d·ª•ng bot.\n"
            "\n*L·ªánh ch√≠nh:*\n"
            "/analyze <m√£> - Ph√¢n t√≠ch m√£ ch·ª©ng kho√°n (v√≠ d·ª•: /analyze FPT)\n"
            "/status - Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng\n"
            "/update - C·∫≠p nh·∫≠t d·ªØ li·ªáu (ch·ªâ admin)\n"
            "/approve <user_id> - Duy·ªát user (ch·ªâ admin)\n"
            "/remove <user_id> - X√≥a user kh·ªèi whitelist (ch·ªâ admin)\n"
            "\n_Bot ƒëang trong giai ƒëo·∫°n ph√°t tri·ªÉn, vui l√≤ng b√°o l·ªói n·∫øu ph√°t hi·ªán._"
        )
        await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

    async def approve_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_admin(update):
            await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
            return
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p user_id c·∫ßn duy·ªát. V√≠ d·ª•: /approve 123456789")
            return
        user_id = context.args[0]
        self.approved_users.add(user_id)
        self._save_whitelist()
        await update.message.reply_text(f"‚úÖ ƒê√£ duy·ªát user_id: {user_id}")

    async def remove_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_admin(update):
            await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
            return
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p user_id c·∫ßn x√≥a. V√≠ d·ª•: /remove 123456789")
            return
        user_id = context.args[0]
        if user_id in self.approved_users:
            self.approved_users.remove(user_id)
            self._save_whitelist()
            await update.message.reply_text(f"‚úÖ ƒê√£ x√≥a user_id: {user_id} kh·ªèi whitelist")
        else:
            await update.message.reply_text(f"‚ùå user_id: {user_id} kh√¥ng c√≥ trong whitelist")

    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_approved(update):
            await update.message.reply_text("‚õî B·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát s·ª≠ d·ª•ng bot. Vui l√≤ng li√™n h·ªá admin.")
            return
        if not context.args:
            await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ ch·ª©ng kho√°n. V√≠ d·ª•: /analyze FPT")
            return
        
        symbol = context.args[0].upper()
        loading_message = await update.message.reply_text(f"‚è≥ ƒêang ph√¢n t√≠ch {symbol}...")
        
        try:
            pipeline_result = self.process_symbol(symbol)
            if pipeline_result and pipeline_result.get("report"):
                await loading_message.edit_text(pipeline_result["report"], parse_mode=ParseMode.MARKDOWN)
            else:
                error_msg = pipeline_result.get("error", "Kh√¥ng r√µ l·ªói")
                await loading_message.edit_text(f"‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch {symbol}: {error_msg}")
        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch {symbol}: {str(e)}", exc_info=True)
            await loading_message.edit_text(f"‚ùå L·ªói khi ph√¢n t√≠ch {symbol}: {str(e)}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_approved(update):
            await update.message.reply_text("‚õî B·∫°n ch∆∞a ƒë∆∞·ª£c duy·ªát s·ª≠ d·ª•ng bot. Vui l√≤ng li√™n h·ªá admin.")
            return
        loading_message = await update.message.reply_text("‚è≥ ƒêang ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng...")
        
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn c√°c API
            groq_ok = self.pipeline.groq_handler.test_connection()
            gemini_ok = self.pipeline.gemini_handler.test_connection()
            db_ok = self.db.test_connection()
            
            # L·∫•y th√¥ng tin h·ªá th·ªëng
            status_text = f"""
üîç *TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG*

üì° *K·∫øt n·ªëi API:*
- Groq API: {"‚úÖ OK" if groq_ok else "‚ùå L·ªói"}
- Gemini API: {"‚úÖ OK" if gemini_ok else "‚ùå L·ªói"}
- Database: {"‚úÖ OK" if db_ok else "‚ùå L·ªói"}

ü§ñ *Th√¥ng tin phi√™n b·∫£n:*
- Bot version: {self.config.get('version', '2.0')}
- Groq model: {self.pipeline.groq_handler.model_name}
- Gemini model: {self.pipeline.gemini_handler.model_name}

‚è±Ô∏è *C·∫≠p nh·∫≠t:* {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}
            """
            
            await loading_message.edit_text(status_text, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: {str(e)}")
            await loading_message.edit_text(f"‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: {str(e)}")
    
    async def update_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self._is_admin(update):
            await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
            return
        loading_message = await update.message.reply_text("‚è≥ ƒêang c·∫≠p nh·∫≠t d·ªØ li·ªáu th·ªã tr∆∞·ªùng...")
        
        try:
            # C·∫≠p nh·∫≠t d·ªØ li·ªáu cho c√°c m√£ VN30
            symbols = self.data_loader.get_vn30_stocks()
            
            if not symbols:
                await loading_message.edit_text("‚ùå Kh√¥ng th·ªÉ l·∫•y danh s√°ch m√£ VN30.")
                return
            
            # Th√™m VNINDEX
            if "VNINDEX" not in symbols:
                symbols.append("VNINDEX")
            
            # C·∫≠p nh·∫≠t t·ª´ng m√£
            success_count = 0
            error_symbols = []
            
            for symbol in symbols:
                try:
                    # T·∫£i l·∫°i d·ªØ li·ªáu
                    self.data_loader.load_stock_data(symbol, force_reload=True)
                    success_count += 1
                except Exception as e:
                    logger.error(f"L·ªói khi c·∫≠p nh·∫≠t {symbol}: {str(e)}")
                    error_symbols.append(symbol)
            
            # Th√¥ng b√°o k·∫øt qu·∫£
            status_text = f"""
üîÑ *C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU TH√ÄNH C√îNG*

‚úÖ ƒê√£ c·∫≠p nh·∫≠t: {success_count}/{len(symbols)} m√£
{f"‚ùå L·ªói: {', '.join(error_symbols)}" if error_symbols else ""}

‚è±Ô∏è *C·∫≠p nh·∫≠t l√∫c:* {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}
            """
            
            await loading_message.edit_text(status_text, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
            await loading_message.edit_text(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: {str(e)}")
    
    def process_symbol(self, symbol: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω ph√¢n t√≠ch m√£ c·ªï phi·∫øu
        
        Args:
            symbol: M√£ c·ªï phi·∫øu c·∫ßn ph√¢n t√≠ch
            
        Returns:
            Dict v·ªõi k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        try:
            # S·ª≠ d·ª•ng pipeline processor ƒë·ªÉ ph√¢n t√≠ch (sync)
            pipeline_data = self.pipeline.process(symbol)
            # L·∫•y k·∫øt qu·∫£ chu·∫©n h√≥a
            if hasattr(pipeline_data, 'to_dict') and callable(getattr(pipeline_data, 'to_dict')):
                result = pipeline_data.to_dict()
            elif hasattr(pipeline_data, 'result'):
                result = pipeline_data.result
            else:
                result = pipeline_data
            # Ki·ªÉm tra l·ªói
            if not result or (isinstance(result, dict) and result.get('has_error')):
                error_msg = result.get('error', 'Kh√¥ng r√µ l·ªói') if isinstance(result, dict) else 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu'
                logger.error(f"L·ªói khi ph√¢n t√≠ch {symbol}: {error_msg}")
                return {"success": False, "error": error_msg}
            # T·ªïng h·ª£p d·ªØ li·ªáu
            aggregated_data = self.pipeline.aggregate_pipeline_result(pipeline_data)
            # Sinh b√°o c√°o
            report_result = self.report_manager.generate_report(
                aggregated_data, 
                symbol,
                meta={
                    "close_today": aggregated_data.get("current_price", 0),
                    "close_yesterday": aggregated_data.get("previous_price", 0)
                }
            )
            if not report_result.get("success") or not report_result.get("report"):
                error_msg = report_result.get("error", "Kh√¥ng th·ªÉ sinh b√°o c√°o")
                logger.error(f"L·ªói khi sinh b√°o c√°o cho {symbol}: {error_msg}")
                return {"success": False, "error": error_msg}
            # L∆∞u b√°o c√°o v√†o DB
            self.report_manager.save_report(
                symbol,
                report_result["report"],
                aggregated_data.get("current_price", 0),
                aggregated_data.get("previous_price", 0)
            )
            return {"success": True, "report": report_result["report"]}
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω {symbol}: {str(e)}", exc_info=True)
            return {"success": False, "error": str(e)}
    
    def run_polling(self):
        """
        Ch·∫°y bot ·ªü ch·∫ø ƒë·ªô polling (g·ªçi li√™n t·ª•c ƒë·∫øn Telegram API)
        """
        logger.info("Kh·ªüi ƒë·ªông bot ·ªü ch·∫ø ƒë·ªô polling...")
        self.application.run_polling()

def parse_args():
    """
    Parse command line arguments
    """
    parser = argparse.ArgumentParser(description="BotChatAI - Telegram only version")
    parser.add_argument("--config", type=str, help="Path to configuration file")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    return parser.parse_args()

def create_app():
    bot = TelegramOnlyBot()
    app = FastAPI()

    @app.post("/webhook/{bot_token}")
    async def telegram_webhook(request: Request, bot_token: str):
        # B·∫£o m·∫≠t: ch·ªâ x·ª≠ l√Ω n·∫øu token ƒë√∫ng
        if bot_token != bot.bot_token:
            return Response(content="Forbidden", status_code=403)
        # ƒê·∫£m b·∫£o Application ƒë√£ ƒë∆∞·ª£c initialize
        if not bot.application._initialized:
            await bot.application.initialize()
        # ƒê·∫£m b·∫£o Bot ƒë√£ ƒë∆∞·ª£c initialize
        if not bot.bot._initialized:
            await bot.bot.initialize()
        data = await request.json()
        update = Update.de_json(data, bot.bot)
        await bot.application.process_update(update)
        return Response(content="OK", status_code=200)

    @app.get("/setup")
    async def setup_webhook(secret: str, url: str):
        setup_secret = os.getenv("SETUP_SECRET", "botchatai_secret")
        if secret != setup_secret:
            raise HTTPException(status_code=403, detail="Secret kh√¥ng h·ª£p l·ªá")
        webhook_url = f"{url}/webhook/{bot.bot_token}"
        result = await bot.bot.set_webhook(webhook_url)
        if result:
            return {"success": True, "message": f"Webhook ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p t·∫°i {webhook_url}"}
        else:
            raise HTTPException(status_code=500, detail="Kh√¥ng th·ªÉ thi·∫øt l·∫≠p webhook")

    @app.get("/")
    async def root():
        return {"status": "online", "bot": "BotChatAI Telegram Bot"}

    return app

if __name__ == "__main__":
    # Parse arguments
    args = parse_args()
    # Set debug mode if specified
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    try:
        # Initialize bot (for local dev/testing)
        bot = TelegramOnlyBot(args.config)
        # Th√¥ng b√°o kh√¥ng h·ªó tr·ª£ polling n·ªØa
        logger.info("Ch·∫ø ƒë·ªô polling ƒë√£ b·ªã lo·∫°i b·ªè. H√£y ch·∫°y b·∫±ng Uvicorn/FastAPI ƒë·ªÉ s·ª≠ d·ª•ng webhook.")
    except Exception as e:
        logger.critical(f"L·ªói nghi√™m tr·ªçng: {str(e)}", exc_info=True)
        sys.exit(1)

# FastAPI app cho Render/production
app = create_app() 