import logging
import os
import feedparser
import httpx
import asyncio
import asyncpg
import redis.asyncio as aioredis
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import google.generativeai as genai

# --- Config ---
class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    REDIS_URL = os.getenv("REDIS_URL", "redis://localhost")
    DB_URL = os.getenv("DATABASE_URL")
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY")
    OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
    GEMINI_MODEL = os.getenv("GEMINI_MODEL", "gemini-1.5-pro")
    OPENROUTER_FALLBACK_MODEL = os.getenv("OPENROUTER_FALLBACK_MODEL", "deepseek/deepseek-chat-v3-0324:free")
    FEED_URLS = [
        "https://news.google.com/rss/search?q=kinh+t%E1%BA%BF&hl=vi&gl=VN&ceid=VN:vi",
        "https://news.google.com/rss/search?q=ch%E1%BB%A9ng+kho%C3%A1n&hl=vi&gl=VN&ceid=VN:vi",
        "https://news.google.com/rss/search?q=v%C4%A9+m%C3%B4&hl=vi&gl=VN&ceid=VN:vi",
        "https://news.google.com/rss/search?q=chi%E1%BA%BFn+tranh&hl=vi&gl=VN&ceid=VN:vi",
        "https://news.google.com/rss/search?q=l%C3%A3i+su%E1%BA%A5t&hl=vi&gl=VN&ceid=VN:vi",
        "https://news.google.com/rss/search?q=fed&hl=vi&gl=VN&ceid=VN:vi",
        "https://news.google.com/rss?hl=vi&gl=VN&ceid=VN:vi",
    ]

# --- Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng b·∫Øt bu·ªôc ---
REQUIRED_ENV_VARS = ["BOT_TOKEN", "OPENROUTER_API_KEY"]  # Kh√¥ng c√≤n CHANNEL_ID
for var in REQUIRED_ENV_VARS:
    if not os.getenv(var):
        raise RuntimeError(f"Missing required environment variable: {var}")

# --- Logging ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=Config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- Redis ---
redis = None

async def is_sent(entry_id):
    return await redis.sismember("sent_news", entry_id)

async def mark_sent(entry_id):
    await redis.sadd("sent_news", entry_id)
    await redis.expire("sent_news", 21600)  # 6h

# --- PostgreSQL ---
pool = None

async def save_news(entry, ai_summary, sentiment):
    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO news_insights (title, link, summary, sentiment, ai_opinion)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (link) DO NOTHING
        """, entry.title, entry.link, entry.summary, sentiment, ai_summary)

# --- AI Analysis (Gemini) ---
GEMINI_MODEL = Config.GEMINI_MODEL
OPENROUTER_FALLBACK_MODEL = Config.OPENROUTER_FALLBACK_MODEL
GOOGLE_GEMINI_API_KEY = Config.GOOGLE_GEMINI_API_KEY

async def analyze_news(title, summary, model=None):
    prompt = f"""
    ƒê√¢y l√† m·ªôt tin t·ª©c t√†i ch√≠nh:
    ---
    {title}
    {summary}
    ---
    H√£y:
    1. T√≥m t·∫Øt ng·∫Øn g·ªçn (d∆∞·ªõi 2 c√¢u)
    2. ƒê∆∞a ra nh·∫≠n ƒë·ªãnh th·ªã tr∆∞·ªùng ng·∫Øn g·ªçn (d∆∞·ªõi 2 c√¢u)
    3. Ph√¢n t√≠ch c·∫£m x√∫c: t√≠ch c·ª±c / ti√™u c·ª±c / trung l·∫≠p.
    Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng:
    - T√≥m t·∫Øt:
    - Nh·∫≠n ƒë·ªãnh:
    - C·∫£m x√∫c:
    """
    try:
        # G·ªçi Google Gemini API ch√≠nh th·ª©c
        genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
        model = genai.GenerativeModel("gemini-1.5-pro")
        response = await asyncio.to_thread(model.generate_content, prompt)
        return response.text
    except Exception as e:
        logging.error(f"Gemini API l·ªói: {e}, fallback sang OpenRouter {OPENROUTER_FALLBACK_MODEL}")
        # Fallback sang OpenRouter
        try:
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",},
                    json={
                        "model": OPENROUTER_FALLBACK_MODEL,
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7
                    }
                )
                result = response.json()
                if "choices" not in result:
                    logging.error(f"OpenRouter API error (model={OPENROUTER_FALLBACK_MODEL}): {result}")
                    raise RuntimeError(f"OpenRouter API error: {result}")
                return result["choices"][0]["message"]["content"]
        except Exception as e2:
            logging.error(f"OpenRouter fallback c≈©ng l·ªói: {e2}")
            raise e2

async def analyze_news_cached(entry_id, title, summary):
    cache_key = f"ai_summary:{entry_id}"
    cached = await redis.get(cache_key)
    if cached:
        return cached.decode()
    result = await analyze_news(title, summary)
    await redis.set(cache_key, result, ex=21600)  # TTL 6h
    return result

# --- L·ªánh ƒëƒÉng k√Ω user ---
@dp.message(Command("register"))
async def register_user(msg: types.Message):
    user_id = msg.from_user.id
    username = msg.from_user.username or ""
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM subscribed_users WHERE user_id=$1", user_id)
        if user:
            if user["is_approved"]:
                await msg.answer("B·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† s·∫Ω nh·∫≠n tin t·ª©c!")
            else:
                await msg.answer("B·∫°n ƒë√£ ƒëƒÉng k√Ω, vui l√≤ng ch·ªù admin duy·ªát!")
            return
        await conn.execute(
            "INSERT INTO subscribed_users (user_id, username, is_approved) VALUES ($1, $2, FALSE) ON CONFLICT (user_id) DO NOTHING",
            user_id, username
        )
    # G·ª≠i th√¥ng b√°o cho admin
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="Duy·ªát user n√†y", callback_data=f"approve_{user_id}")]]
    )
    await bot.send_message(
        Config.ADMIN_ID,
        f"Y√™u c·∫ßu duy·ªát user m·ªõi: @{username} (ID: {user_id})",
        reply_markup=kb
    )
    await msg.answer("ƒê√£ g·ª≠i y√™u c·∫ßu ƒëƒÉng k√Ω, vui l√≤ng ch·ªù admin duy·ªát!")

# --- X·ª≠ l√Ω callback admin duy·ªát user ---
@dp.callback_query(F.data.startswith("approve_"))
async def approve_user_callback(cb: CallbackQuery):
    if cb.from_user.id != Config.ADMIN_ID:
        await cb.answer("Ch·ªâ admin m·ªõi ƒë∆∞·ª£c duy·ªát!", show_alert=True)
        return
    user_id = int(cb.data.split("_")[1])
    async with pool.acquire() as conn:
        await conn.execute("UPDATE subscribed_users SET is_approved=TRUE WHERE user_id=$1", user_id)
        user = await conn.fetchrow("SELECT username FROM subscribed_users WHERE user_id=$1", user_id)
    await bot.send_message(user_id, "B·∫°n ƒë√£ ƒë∆∞·ª£c admin duy·ªát, s·∫Ω nh·∫≠n tin t·ª©c t·ª´ bot!")
    await cb.answer(f"ƒê√£ duy·ªát user @{user['username']} ({user_id})")

# --- Tin t·ª©c theo chu k·ª≥ ---
async def news_job():
    while True:
        await delete_old_news(days=7)  # X√≥a tin c≈© h∆°n 7 ng√†y
        for url in Config.FEED_URLS:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                if await is_sent(entry.id):
                    continue
                await mark_sent(entry.id)

                title = entry.title
                summary = entry.summary

                # Lu√¥n ph√¢n t√≠ch AI, kh√¥ng d·ªãch n·ªØa
                ai_summary = await analyze_news_cached(entry.id, title, summary)

                sentiment = "Trung l·∫≠p"
                for line in ai_summary.splitlines():
                    if "C·∫£m x√∫c" in line:
                        sentiment = line.split(":")[-1].strip()
                        break

                await save_news(entry, ai_summary, sentiment)

                # L·∫•y danh s√°ch user ƒë√£ duy·ªát t·ª´ DB v√† g·ª≠i tin
                async with pool.acquire() as conn:
                    rows = await conn.fetch("SELECT user_id FROM subscribed_users WHERE is_approved=TRUE")
                for row in rows:
                    await bot.send_message(row["user_id"], f"üì∞ *{title}*\n{entry.link}\n\nü§ñ *Gemini AI ph√¢n t√≠ch:*\n{ai_summary}", parse_mode="Markdown")
                break  # Ch·ªâ g·ª≠i 1 tin m·ªõi ƒë·∫ßu ti√™n m·ªói ngu·ªìn

        await asyncio.sleep(14 * 60)  # 14 ph√∫t

# --- Webhook setup ---
# (Kh√¥ng ƒëƒÉng k√Ω b·∫•t k·ª≥ handler n√†o cho l·ªánh t·ª´ user)
async def init_db():
    async with pool.acquire() as conn:
        # T·∫°o b·∫£ng news_insights n·∫øu ch∆∞a c√≥
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS news_insights (
            id SERIAL PRIMARY KEY,
            title TEXT,
            link TEXT UNIQUE,
            summary TEXT,
            sentiment TEXT,
            ai_opinion TEXT,
            created_at TIMESTAMP DEFAULT NOW()
        );
        ''')
        # ƒê·∫£m b·∫£o c·ªôt created_at t·ªìn t·∫°i (n·∫øu migrate t·ª´ b·∫£n c≈©)
        await conn.execute('''
        ALTER TABLE news_insights ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT NOW();
        ''')
        # T·∫°o b·∫£ng subscribed_users n·∫øu ch∆∞a c√≥
        await conn.execute('''
        CREATE TABLE IF NOT EXISTS subscribed_users (
            user_id BIGINT PRIMARY KEY,
            username TEXT,
            is_approved BOOLEAN DEFAULT FALSE
        );
        ''')

# H√†m x√≥a tin c≈© h∆°n 7 ng√†y
async def delete_old_news(days=7):
    async with pool.acquire() as conn:
        await conn.execute(
            f"DELETE FROM news_insights WHERE created_at < NOW() - INTERVAL '{days} days';"
        )

async def on_startup(app):
    global redis, pool
    redis = await aioredis.from_url(Config.REDIS_URL)
    pool = await asyncpg.create_pool(dsn=Config.DB_URL)
    await init_db()  # T·ª± ƒë·ªông t·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
    await bot.set_webhook(Config.WEBHOOK_URL)
    asyncio.create_task(news_job())

async def on_shutdown(app):
    await bot.delete_webhook()
    await pool.close()
    await redis.close()

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=8000)
