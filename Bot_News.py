import logging
import os
import feedparser
import httpx
import asyncio
import asyncpg
import aioredis
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# --- Config ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost")
DB_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
CHANNEL_ID = os.getenv("CHANNEL_ID")  # Chat id c·ªßa channel Telegram
# Danh s√°ch ngu·ªìn tin Google News RSS theo ch·ªß ƒë·ªÅ n√≥ng (ti·∫øng Vi·ªát v√† ti·∫øng Anh)
FEED_URLS = [
    # --- Ti·∫øng Vi·ªát ---
    # Kinh t·∫ø
    "https://news.google.com/rss/search?q=kinh+t%E1%BA%BF&hl=vi&gl=VN&ceid=VN:vi",
    # Ch·ª©ng kho√°n
    "https://news.google.com/rss/search?q=ch%E1%BB%A9ng+kho%C3%A1n&hl=vi&gl=VN&ceid=VN:vi",
    # Vƒ© m√¥
    "https://news.google.com/rss/search?q=v%C4%A9+m%C3%B4&hl=vi&gl=VN&ceid=VN:vi",
    # Chi·∫øn tranh
    "https://news.google.com/rss/search?q=chi%E1%BA%BFn+tranh&hl=vi&gl=VN&ceid=VN:vi",
    # L√£i su·∫•t
    "https://news.google.com/rss/search?q=l%C3%A3i+su%E1%BA%A5t&hl=vi&gl=VN&ceid=VN:vi",
    # Fed
    "https://news.google.com/rss/search?q=fed&hl=vi&gl=VN&ceid=VN:vi",
    # Tin n√≥ng
    "https://news.google.com/rss?hl=vi&gl=VN&ceid=VN:vi",
    # --- Ti·∫øng Anh ---
    # Stock market
    "https://news.google.com/rss/search?q=stock+market&hl=en&gl=US&ceid=US:en",
    # Economic policy
    "https://news.google.com/rss/search?q=economic+policy&hl=en&gl=US&ceid=US:en",
    # Macro economics
    "https://news.google.com/rss/search?q=macroeconomics&hl=en&gl=US&ceid=US:en",
    # Federal Reserve (Fed)
    "https://news.google.com/rss/search?q=federal+reserve+OR+fed&hl=en&gl=US&ceid=US:en",
    # Interest rates
    "https://news.google.com/rss/search?q=interest+rates&hl=en&gl=US&ceid=US:en",
    # War (vƒ© m√¥, ƒë·ªãa ch√≠nh tr·ªã)
    "https://news.google.com/rss/search?q=war&hl=en&gl=US&ceid=US:en",
    # Breaking news (kinh t·∫ø, t√†i ch√≠nh)
    "https://news.google.com/rss/search?q=breaking+news+economy+finance&hl=en&gl=US&ceid=US:en",
]

# --- Logging ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- Redis ---
redis = None

async def is_sent(entry_id):
    return await redis.sismember("sent_news", entry_id)

async def mark_sent(entry_id):
    await redis.sadd("sent_news", entry_id)
    await redis.expire("sent_news", 21600)  # 6h

# --- PostgreSQL ---
pool = None

async def save_news(entry, ai_summary, sentiment):
    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO news_insights (title, link, summary, sentiment, ai_opinion)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (link) DO NOTHING
        """, entry.title, entry.link, entry.summary, sentiment, ai_summary)

# --- AI Analysis (Gemini) ---
GEMINI_MODEL = os.getenv("GEMINI_MODEL", "google/gemini-pro")
OPENROUTER_FALLBACK_MODEL = os.getenv("OPENROUTER_FALLBACK_MODEL", "openai/gpt-3.5-turbo")

async def analyze_news(title, summary, model=None):
    if model is None:
        model = GEMINI_MODEL
    prompt = f"""
    ƒê√¢y l√† m·ªôt tin t·ª©c t√†i ch√≠nh:
    ---
    {title}
    {summary}
    ---
    H√£y:
    1. T√≥m t·∫Øt ng·∫Øn g·ªçn (d∆∞·ªõi 2 c√¢u)
    2. ƒê∆∞a ra nh·∫≠n ƒë·ªãnh th·ªã tr∆∞·ªùng ng·∫Øn g·ªçn (d∆∞·ªõi 2 c√¢u)
    3. Ph√¢n t√≠ch c·∫£m x√∫c: t√≠ch c·ª±c / ti√™u c·ª±c / trung l·∫≠p.
    Tr·∫£ v·ªÅ k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng:
    - T√≥m t·∫Øt:
    - Nh·∫≠n ƒë·ªãnh:
    - C·∫£m x√∫c:
    """
    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}",},
                json={
                    "model": model,
                    "messages": [{"role": "user", "content": prompt}],
                    "temperature": 0.7
                }
            )
            result = response.json()
            return result["choices"][0]["message"]["content"]
    except Exception as e:
        if model == GEMINI_MODEL:
            print(f"Gemini l·ªói: {e}, fallback sang {OPENROUTER_FALLBACK_MODEL}")
            return await analyze_news(title, summary, model=OPENROUTER_FALLBACK_MODEL)
        else:
            raise e

async def analyze_news_cached(entry_id, title, summary):
    cache_key = f"ai_summary:{entry_id}"
    cached = await redis.get(cache_key)
    if cached:
        return cached.decode()
    result = await analyze_news(title, summary)
    await redis.set(cache_key, result, ex=21600)  # TTL 6h
    return result

# --- D·ªãch t·ª± ƒë·ªông v·ªõi LibreTranslate ---
async def translate_text(text, source_lang="en", target_lang="vi"):
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://libretranslate.de/translate",
            data={
                "q": text,
                "source": source_lang,
                "target": target_lang,
                "format": "text"
            }
        )
        return response.json()["translatedText"]

# --- Tin t·ª©c theo chu k·ª≥ ---
async def news_job():
    while True:
        for url in FEED_URLS:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                if await is_sent(entry.id):
                    continue
                await mark_sent(entry.id)

                title = entry.title
                summary = entry.summary

                is_english = any(ord(c) < 128 for c in title)

                if is_english:
                    ai_summary_en = await analyze_news_cached(entry.id, title, summary)
                    ai_summary = await translate_text(ai_summary_en, source_lang="en", target_lang="vi")
                else:
                    ai_summary = await analyze_news_cached(entry.id, title, summary)

                sentiment = "Trung l·∫≠p"
                for line in ai_summary.splitlines():
                    if "C·∫£m x√∫c" in line:
                        sentiment = line.split(":")[-1].strip()
                        break

                await save_news(entry, ai_summary, sentiment)

                # G·ª≠i tin v√†o channel duy nh·∫•t
                await bot.send_message(CHANNEL_ID, f"üì∞ *{title}*\n{entry.link}\n\nü§ñ *Gemini AI ph√¢n t√≠ch:*\n{ai_summary}", parse_mode="Markdown")

        await asyncio.sleep(14 * 60)  # 14 ph√∫t

# --- Webhook setup ---
# (Kh√¥ng ƒëƒÉng k√Ω b·∫•t k·ª≥ handler n√†o cho l·ªánh t·ª´ user)
async def on_startup(app):
    global redis, pool
    redis = await aioredis.from_url(REDIS_URL)
    pool = await asyncpg.create_pool(dsn=DB_URL)
    await bot.set_webhook(WEBHOOK_URL)
    asyncio.create_task(news_job())

async def on_shutdown(app):
    await bot.delete_webhook()
    await pool.close()
    await redis.close()

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=8000)
